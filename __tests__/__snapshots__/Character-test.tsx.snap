// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Characters Screen uses props renders correctly 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "paddingTop": 24,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "space-between",
        "marginHorizontal": 24,
      }
    }
  >
    <View
      style={
        Object {
          "paddingVertical": 8,
        }
      }
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "borderColor": "#FFFFFF",
            "borderRadius": 100,
            "borderStyle": "solid",
            "borderWidth": 1,
            "flexDirection": "row",
            "height": 40,
            "justifyContent": "center",
            "width": "95%",
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={false}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
        >
          <Text
            allowFontScaling={false}
            selectable={false}
            style={
              Array [
                Object {
                  "color": "#6D6E71",
                  "fontSize": 20,
                },
                undefined,
                Object {
                  "fontFamily": "Ionicons",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
                Object {},
              ]
            }
          >
            
          </Text>
        </View>
        <TextInput
          autoCapitalize="none"
          autoFocus={false}
          keyboardType="default"
          onChangeText={[Function]}
          placeholder="Search by name"
          placeholderTextColor="#6D6E71"
          returnKeyType="search"
          style={
            Object {
              "backgroundColor": "transparent",
              "borderColor": "transparent",
              "borderStyle": "solid",
              "borderWidth": 1,
              "color": "#1b1b1b",
              "height": "100%",
              "width": "85%",
            }
          }
          value=""
        />
      </View>
    </View>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "#727cf5",
          "borderRadius": 10,
          "height": 40,
          "justifyContent": "center",
          "width": 40,
        }
      }
    >
      <Text
        allowFontScaling={false}
        selectable={false}
        style={
          Array [
            Object {
              "color": "#FFFFFF",
              "fontSize": 30,
            },
            undefined,
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        
      </Text>
    </View>
  </View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "marginLeft": 12,
      }
    }
  >
    <View />
    <View />
    <View />
  </View>
  <RCTScrollView
    CellRendererComponent={[Function]}
    ListEmptyComponent={
      <EmptyList
        subTitle="Your search was not found"
      />
    }
    ListHeaderComponent={
      <View
        style={
          Object {
            "height": 10,
          }
        }
      />
    }
    animatedStyle={
      Object {
        "value": Object {},
      }
    }
    collapsable={false}
    data={Array []}
    entering={
      FadeIn {
        "build": [Function],
        "durationV": 300,
        "randomizeDelay": false,
      }
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
        tintColor="rgb(28, 28, 30)"
        title=""
        titleColor="rgb(28, 28, 30)"
      />
    }
    refreshing={false}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsVerticalScrollIndicator={false}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "rgb(242, 242, 242)",
        "flex": 1,
      }
    }
    viewabilityConfigCallbackPairs={Array []}
  >
    <RCTRefreshControl />
    <View>
      <View
        onLayout={[Function]}
      >
        <View
          style={
            Object {
              "height": 10,
            }
          }
        />
      </View>
      <View
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "column",
            "justifyContent": "center",
            "marginTop": 240,
          }
        }
      >
        <Text
          allowFontScaling={false}
          selectable={false}
          style={
            Array [
              Object {
                "color": "#AEAEB6",
                "fontSize": 267,
              },
              undefined,
              Object {
                "fontFamily": "Ionicons",
                "fontStyle": "normal",
                "fontWeight": "normal",
              },
              Object {},
            ]
          }
        >
          
        </Text>
        <View
          style={
            Object {
              "marginTop": 48,
              "paddingHorizontal": 192,
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "rgb(28, 28, 30)",
                  "fontFamily": "Montserrat-Regular",
                  "fontSize": 28,
                },
                Object {
                  "fontSize": 25,
                  "textAlign": "center",
                },
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
                undefined,
              ]
            }
          >
            Your search was not found
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View>
    <Modal
      animationType="none"
      deviceHeight={null}
      deviceWidth={null}
      hardwareAccelerated={false}
      hideModalContentWhileAnimating={false}
      onBackdropPress={[Function]}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      onRequestClose={[Function]}
      panResponderThreshold={4}
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      statusBarTranslucent={false}
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
      transparent={true}
      visible={false}
    />
  </View>
</View>
`;
